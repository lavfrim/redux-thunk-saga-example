{"version":3,"sources":["redux/reducers/postsReducer.js","redux/reducers/appReducer.js","redux/reducers/rootReducer.js","redux/types.js","constants/forbidden-words.js","redux/actions.js","constants/url.js","redux/middleware/sagas.js","constants/alert-message.js","components/PostForm/post-form.js","constants/post-form.js","components/PostForm/index.js","components/Post/index.js","components/Post/post.js","components/Posts/index.js","components/Posts/posts.js","components/Loading/loading.js","components/FetchedPosts/index.js","components/FetchedPosts/fetched-posts.js","components/Alert/index.js","components/Alert/alert.js","App.js","index.js","redux/middleware/forbidden-words.js"],"names":["initialState","posts","id","title","fetchedPosts","isLoading","alert","rootReducer","combineReducers","state","action","type","payload","app","FORBIDDEN_WORDS_ARRAY","showAlert","message","hideAlert","fetchPostURL","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPost","JSON","stringify","errorMessage","Promise","res","setTimeout","a","fetch","response","json","PostForm","props","submitHandler","submitEvent","createPost","preventDefault","length","Date","now","setState","isShowAlert","changeInputHandler","changeEvent","currentTarget","name","value","this","onSubmit","className","htmlFor","placeholder","onChange","React","PureComponent","mapDispatchToProps","post","PostFrom","connect","Post","map","key","Loading","role","FetchedPosts","useSelector","dispatch","useDispatch","onClick","Alert","App","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","word","includes","window","__REDUX_DEVTOOLS_EXTENSION__","run","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b60fbb69.chunk.js","sourcesContent":["import {\r\n    CREATE_POST,\r\n    SET_POSTS,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n    posts: [{ id: 1, title: 'one'}, { id: 2, title: 'two'}],\r\n    fetchedPosts: [],\r\n}\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CREATE_POST:\r\n            return {...state, posts: [...state.posts, action.payload] };\r\n        case SET_POSTS:\r\n            return {...state, fetchedPosts: action.payload };\r\n        default: return state;\r\n    }\r\n};","import {\r\n    SHOW_LOADER,\r\n    HIDE_LOADER,\r\n    SHOW_ALERT,\r\n    HIDE_ALERT,\r\n} from '../types';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    alert: null,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_LOADER:\r\n            return { ...state, isLoading: true };\r\n        case HIDE_LOADER:\r\n            return { ...state, isLoading: false };\r\n        case SHOW_ALERT:\r\n            return { ...state, alert: action.payload };\r\n        case HIDE_ALERT:\r\n            return { ...state, alert: null };\r\n        default: return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\n\r\nimport { postsReducer } from './postsReducer';\r\nimport { appReducer } from './appReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n   posts: postsReducer,\r\n   app: appReducer,\r\n})","export const CREATE_POST = 'CREATE_POST';\r\nexport const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const SHOW_LOADER = 'SHOW_LOADER';\r\nexport const HIDE_LOADER = 'HIDE_LOADER';\r\nexport const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\nexport const SET_POSTS = 'SET_POSTS';","export const FORBIDDEN_WORDS_ARRAY = [\r\n    'fuck',\r\n    'hui',\r\n    'suka',\r\n    'bliat',\r\n    'idina',\r\n    'idi na'\r\n]","import {\r\n    CREATE_POST,\r\n    FETCH_POSTS,\r\n    SHOW_LOADER,\r\n    HIDE_LOADER,\r\n    SHOW_ALERT,\r\n    HIDE_ALERT,\r\n    SET_POSTS,\r\n} from './types';\r\n\r\n\r\nexport const createPost = (post) => ({\r\n    type: CREATE_POST,\r\n    payload: post\r\n});\r\n\r\nexport const fetchPosts = () => {\r\n    return {\r\n        type: FETCH_POSTS,\r\n    }\r\n};\r\n\r\nexport const setPosts = (posts) => {\r\n    return {\r\n        type: SET_POSTS,\r\n        payload: posts,\r\n    };\r\n};\r\n\r\nexport const showLoader = () => {\r\n    return {\r\n        type: SHOW_LOADER,\r\n    };\r\n};\r\n\r\nexport const hideLoader = () => {\r\n    return {\r\n        type: HIDE_LOADER,\r\n    };\r\n};\r\n\r\nexport const showAlert = (message) => {\r\n    return {\r\n        type: SHOW_ALERT,\r\n        payload: message,\r\n    };\r\n};\r\n\r\nexport const hideAlert = () => {\r\n    return {\r\n        type: HIDE_ALERT,\r\n    };\r\n};\r\n","export const fetchPostURL = 'https://jsonplaceholder.typicode.com/posts?_limit=5';","import { takeEvery, put, call } from 'redux-saga/effects';\r\n\r\nimport { FETCH_POSTS } from '../types';\r\nimport {\r\n    showLoader,\r\n    setPosts,\r\n    hideLoader,\r\n    showAlert,\r\n    hideAlert,\r\n    fetchPosts\r\n} from '../actions';\r\nimport { fetchPostURL } from '../../constants/url';\r\nimport {\r\n    FETCH_ERROR,\r\n    UNKNOWN_ERROR,\r\n} from '../../constants/alert-message';\r\n\r\n\r\nexport function * sagaWatcher() {\r\n    yield takeEvery(FETCH_POSTS, sagaWorker);\r\n}\r\n\r\nexport function * sagaWorker() {\r\n    try {\r\n        yield put(hideAlert());\r\n        yield put(showLoader());\r\n        const payload = yield call(fetchPost);\r\n        yield put(setPosts(payload));\r\n        yield put(hideLoader());\r\n    } catch (error) {\r\n        const errorMessage = yield error.message\r\n            || JSON.stringify(error)\r\n            || UNKNOWN_ERROR;\r\n        yield put(showAlert(`>>${errorMessage}<<  ${FETCH_ERROR}`));\r\n        yield new Promise(res => setTimeout(() => res(), 5000));\r\n        yield put(fetchPosts());\r\n    }\r\n}\r\n\r\nexport function * sagaWorkerWWWW() {\r\n   yield console.log('sagaWorkerWWWW');\r\n}\r\n\r\nexport async function fetchPost() {\r\n    const response = await fetch(fetchPostURL);\r\n    return await response.json();\r\n}","export const FETCH_ERROR = 'Fetch error. Check your network';\r\nexport const UNKNOWN_ERROR = 'Unknown network error';\r\nexport const NON_EMPTY_TITLE = 'Title have to be more than one character';\r\nexport const FORBIDDEN_WORDS_MESSAGE = 'Wow-wow, easy, Dirty mouth';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { createPost, showAlert, hideAlert } from '../../redux/actions';\r\nimport { NON_EMPTY_TITLE } from '../../constants/alert-message';\r\nimport { FORBIDDEN_COUNT_CHARACTER } from '../../constants/post-form';\r\n\r\n\r\nclass PostForm extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: '',\r\n            isShowAlert: false,\r\n        };\r\n    }\r\n\r\n    submitHandler = (submitEvent) => {\r\n        const { title } = this.state;\r\n        const { createPost, showAlert } = this.props;\r\n\r\n        submitEvent.preventDefault();\r\n        if (title.length > FORBIDDEN_COUNT_CHARACTER) {\r\n            createPost({\r\n                id: Date.now(),\r\n                title,\r\n            });\r\n\r\n            this.setState({\r\n                title: '',\r\n            })\r\n        } else {\r\n            showAlert(NON_EMPTY_TITLE);\r\n\r\n            this.setState({\r\n                isShowAlert: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    changeInputHandler = (changeEvent) => {\r\n        const { currentTarget: { name, value } } = changeEvent;\r\n        const { isShowAlert } = this.state;\r\n        const { hideAlert } = this.props;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n\r\n        if (isShowAlert && (name === 'title' && value.length > FORBIDDEN_COUNT_CHARACTER)) {\r\n            hideAlert();\r\n\r\n            this.setState({\r\n                isShowAlert: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { title } = this.state;\r\n\r\n        return (\r\n            <form onSubmit={this.submitHandler} className=\"mb-5\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\" className=\"w-100 text-center\">\r\n                        <h1>Post title</h1>\r\n                    </label>\r\n                    <input\r\n                        id=\"title\"\r\n                        name=\"title\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Enter title of post\"\r\n                        value={title}\r\n                        onChange={this.changeInputHandler}\r\n                    />\r\n                </div>\r\n                <button className=\"btn btn-success w-100\" type=\"submit\">\r\n                    Create post\r\n                </button>           \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost,\r\n    showAlert,\r\n    hideAlert,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(PostForm);","export const FORBIDDEN_COUNT_CHARACTER = 1;","import PostFrom from './post-form';\r\n\r\nexport default PostFrom;","import Post from './post';\r\n\r\nexport default Post;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Post = (props) => {\r\n    const { post: { title } } = props;\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h2 className=\"card-title\">{title}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nPost.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        title: PropTypes.string,\r\n    }).isRequired,\r\n}\r\n\r\nexport default Post;","import Post from './posts';\r\n\r\nexport default Post;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Post from '../Post';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.posts.posts,\r\n});\r\n\r\nconst Posts = (props) => {\r\n    const { posts } = props;\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column justify-content-center\">\r\n            <h1 className=\"text-center\">SYNC POSTS</h1>\r\n            {posts.length > 0\r\n                ? posts.map(post => <Post key={post.id} post={post} />)\r\n                : <h5>No one post</h5>}\r\n        </div>\r\n    )\r\n};\r\n\r\nPosts.propTypes = {\r\n    posts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number,\r\n        title: PropTypes.string,\r\n    })).isRequired,\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Posts);","import React from 'react';\r\n\r\nconst Loading = () => (\r\n    <div className=\"spinner-border text-primary\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n);\r\n\r\nexport default Loading;","import FetchedPosts from './fetched-posts';\r\n\r\nexport default FetchedPosts;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Post from '../Post';\r\nimport { fetchPosts } from '../../redux/actions';\r\nimport Loading from '../Loading/loading';\r\n\r\n\r\nconst FetchedPost = () => {\r\n    const {\r\n        posts,\r\n        isLoading,\r\n    } = useSelector(state => ({\r\n        posts: state.posts.fetchedPosts,\r\n        isLoading: state.app.isLoading,\r\n    }));\r\n    const dispatch = useDispatch();\r\n\r\n    if (posts.length > 0) {\r\n        return (\r\n            <div className=\"d-flex flex-column justify-content-center\">\r\n                <h1 className=\"text-center\">ASYNC POSTS</h1>\r\n                {posts.map(post => <Post key={post.id} post={post} />)}\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"d-flex flex-column justify-content-center\">\r\n                <h1 className=\"text-center\">ASYNC POSTS</h1>\r\n                {isLoading\r\n                ? <div className=\"d-flex justify-content-center w-100 mt-4\">\r\n                    <Loading />\r\n                  </div>\r\n                : <button\r\n                    className=\"btn btn-primary mt-4\"\r\n                    onClick={() => dispatch(fetchPosts())}\r\n                >\r\n                    Fetch posts\r\n                </button>}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nexport default FetchedPost;","import Alert from './alert';\r\n\r\nexport default Alert;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Alert = () => {\r\n    const alert = useSelector(state => state.app.alert);\r\n\r\n    return (alert &&\r\n        <div\r\n            className=\"fixed-bottom alert alert-primary text-center\"\r\n            role=\"alert\"\r\n        >\r\n            {alert}\r\n        </div>);\r\n}\r\n\r\nexport default Alert;","import React from 'react';\r\n\r\nimport PostForm from './components/PostForm';\r\nimport Posts from './components/Posts';\r\nimport FetchedPosts from './components/FetchedPosts';\r\nimport Alert from './components/Alert';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <div className=\"container mt-3\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <PostForm />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <Posts />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <FetchedPosts />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Alert />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { rootReducer } from './redux/reducers/rootReducer';\r\nimport { forbiddenWordsMeddleware } from './redux/middleware/forbidden-words';\r\nimport { sagaWatcher } from './redux/middleware/sagas';\r\n\r\nimport App from './App';\r\n\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(\r\n    applyMiddleware(thunk, forbiddenWordsMeddleware, saga),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nsaga.run(sagaWatcher);\r\n\r\n// >> with composeWithDevTools as\r\n// >> compose(\r\n// >>    applyMiddleware(...middleware),\r\n// >>    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n// >> )\r\n// \r\n// const store = createStore(\r\n//   rootReducer,\r\n//   composeWithDevTools()\r\n// );\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","import { FORBIDDEN_WORDS_ARRAY } from '../../constants/forbidden-words';\r\nimport { FORBIDDEN_WORDS_MESSAGE } from '../../constants/alert-message';\r\nimport { CREATE_POST } from '../types';\r\nimport { showAlert, hideAlert } from '../actions';\r\n\r\nexport function forbiddenWordsMeddleware({ dispatch }) {\r\n    return function(next) {\r\n        return function(action) {\r\n            if (action.type === CREATE_POST) {\r\n                const foundArray = FORBIDDEN_WORDS_ARRAY.filter(word => action.payload.title.includes(word));\r\n                if (foundArray.length) {\r\n                    dispatch(showAlert(FORBIDDEN_WORDS_MESSAGE));\r\n                    setTimeout(() => dispatch(hideAlert()), 3000);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            return next(action);\r\n        }\r\n    }\r\n};"],"sourceRoot":""}